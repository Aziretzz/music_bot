import logging  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
import sqlite3  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite
import os
import yt_dlp  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ —Å YouTube
from aiogram import Bot, Dispatcher, executor, types  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª–∞—Å—Å—ã –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ aiogram
from aiogram.contrib.fsm_storage.memory import MemoryStorage  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
from requests import get  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤

logging.basicConfig(level=logging.INFO)  # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

bot = Bot(token="7228254452:AAG55Ju4hI3EeKmOwaE4GWeEoXPPHqROy4M")  # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞

storage = MemoryStorage()  # –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏
dp = Dispatcher(bot, storage=storage)  # –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π

# –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
conn = sqlite3.connect('mp3_db.db')
c = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
c.execute('''
    CREATE TABLE IF NOT EXISTS music_history (
        id INTEGER PRIMARY KEY,
        user_id TEXT,
        search_query TEXT,
        file_path TEXT
    )
''')


# –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Å–±–æ—Ä–∞ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤
class FilenameCollectorPP(yt_dlp.postprocessor.common.PostProcessor):
    def __init__(self):
        super(FilenameCollectorPP, self).__init__(None)
        self.filenames = []

    def run(self, information):
        self.filenames.append(information["filepath"])
        return [], information


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ '/start' –∏ '/help'
@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç, —è –º–æ–≥—É —Å–∫–∞—á–∞—Ç—å –¥–ª—è —Ç–µ–±—è –ª—é–±–æ–π —Ç—Ä–µ–∫üëå\n–ü–æ—Å–º–æ—Ç—Ä–∏ –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å –≤ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥üòä")


# –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π
class Form(StatesGroup):
    song = State()  # –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ 'song'


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã '/download'
@dp.message_handler(commands='download')
async def start_cmd_handler(message: types.Message):
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∞–≤—Ç–æ—Ä–∞ —Ç—Ä–µ–∫–∞üòÑ")
    await Form.song.set()  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ 'song'


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ 'song'
@dp.message_handler(state=Form.song)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['song'] = message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–µ—Å–Ω–∏
    await message.reply('–û–∂–∏–¥–∞–π—Ç–µ...üò¥')
    YDL_OPTIONS = {'format': 'bestaudio/best',
                   'noplaylist': 'True',
                   'postprocessors': [{
                       'key': 'FFmpegExtractAudio',
                       'preferredcodec': 'mp3',
                       'preferredquality': '192'
                   }],
                   'outtmpl': 'music/%(title)s.%(ext)s',  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ 'music'
                   }
    with yt_dlp.YoutubeDL(YDL_OPTIONS) as ydl:
        try:
            get(data['song'])
        except:
            filename_collector = FilenameCollectorPP()
            ydl.add_post_processor(filename_collector)
            info_dict = ydl.extract_info(f"ytsearch:{data['song']}", download=False)
            if not info_dict['entries']:
                await message.reply("–í–∞—à–∞ –º—É–∑—ã–∫–∞ –Ω–∞—Å—Ç–æ–ª—å–∫–æ –∫—Ä—É—Ç–∞, —á—Ç–æ –µ—ë –¥–∞–∂–µ –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –Ω–µ—Çü§™")
                return
            video = ydl.extract_info(f"ytsearch:{data['song']}", download=True)['entries'][0]
            await message.reply_document(open(filename_collector.filenames[0], 'rb'))
            await message.reply(f'–í–æ—Ç –≤–∞—à–∞ –º—É–∑—ã–∫–∞ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—åüòã')
            await state.finish()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∏—Å–∫–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            c.execute("INSERT INTO music_history (user_id, search_query, file_path) VALUES (?, ?, ?)",
                      (message.from_user.id, data['song'], filename_collector.filenames[0]))
            conn.commit()

        else:
            video = ydl.extract_info(data['song'], download=True)

        return filename_collector.filenames[0]


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã '/history'
@dp.message_handler(commands=['history'])
async def show_history(message: types.Message):
    user_id = message.from_user.id

    c.execute("SELECT * FROM music_history WHERE user_id=?", (user_id,))
    rows = c.fetchall()
    if rows:
        history = "\n".join([f"{row[0]}. {row[2]}" for row in rows])
        await message.reply(f"–í–æ—Ç –≤–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞:\n{history}")
    else:
        await message.reply("–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ –ø—É—Å—Ç–∞.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã '/download_from_history'
@dp.message_handler(commands=['download_from_history'])
async def download_from_history(message: types.Message):
    user_id = message.from_user.id
    await message.reply("–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏—â–µ–º –≤–∞—à–∏ –ø–µ—Å–Ω–∏ –≤ –±–∞–∑–µüßê")
    c.execute("SELECT file_path FROM music_history WHERE user_id=?", (user_id,))
    file_paths = c.fetchall()
    print(file_paths)
    for file_path in file_paths:
        with open(file_path[0], 'rb') as f:
            await message.reply_document(f)
    await message.reply("–≠—Ç–æ –≤—Å–µü•≥")


@dp.message_handler(commands=['delete_history'])
async def delete_history(message: types.Message):
    user_id = message.from_user.id
    c.execute("SELECT file_path FROM music_history WHERE user_id=?", (user_id,))
    file_paths =c.fetchall()
    if not file_paths:
        await message.reply("–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∑–æ–∫ –ø—É—Å—Ç–∞üòï")
    else:
        for file_path in file_paths:
            if os.path.exists(file_path[0]):
                os.remove(file_path[0])

        c.execute("DELETE FROM music_history WHERE user_id=?", (user_id,))
        conn.commit()
        await message.reply("–ò—Å—Ç–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞üòé")


if __name__ == '__main__':
    try:
        executor.start_polling(dp)  # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        conn.close()
